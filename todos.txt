External dependencies:

for telescope:
https://github.com/BurntSushi/ripgrep -> line oriented search tool for search tool using regexgggg
https://github.com/sharkdp/fd -> optional, for finding entries. alternative to find utility.


=======
plugins
basic native config
lsp server
tmux support on windows


lazy.vim as plugin mng

then install an lsp


:healthcheck

Configuration ~
- WARNING Missing user config file: C:\Users\Marc\AppData\Local\nvim/init.lua
  - ADVICE:
    - :help |config|


:help confing

7. Load user config (execute Ex commands from files, environment, …).
	$VIMINIT environment variable is read as one Ex command line (separate
	multiple commands with '|' or <NL>).
					*config* *init.vim* *init.lua* *vimrc* *exrc*
	A file containing initialization commands is generically called
	a "vimrc" or config file.  It can be either Vimscript ("init.vim") or
	Lua ("init.lua"), but not both. *E5422*
	See also |vimrc-intro| and |base-directories|.

	The config file is located at:
	Unix			~/.config/nvim/init.vim		(or init.lua)
	Windows			~/AppData/Local/nvim/init.vim	(or init.lua)
	|$XDG_CONFIG_HOME|	$XDG_CONFIG_HOME/nvim/init.vim	(or init.lua)

	If Nvim was started with "-u {file}" then {file} is used as the config
	and all initializations until 8. are skipped. $MYVIMRC is not set.
	"nvim -u NORC" can be used to skip these initializations without
	reading a file.  "nvim -u NONE" also skips plugins and syntax
	highlighting.  |-u|

	If Nvim was started with |-es| or |-Es| or |-l| all initializations until 8.
	are skipped.
						*system-vimrc* *sysinit.vim*
     a. The system vimrc file is read for initializations.  If
	nvim/sysinit.vim file exists in one of $XDG_CONFIG_DIRS, it will be
	used.  Otherwise the system vimrc file is used. The path of this file
	is given by the |:version| command.  Usually it's "$VIM/sysinit.vim".

						*VIMINIT* *EXINIT* *$MYVIMRC*
     b. Locations searched for initializations, in order of preference:
	-  $VIMINIT environment variable (Ex command line).
	-  User |config|: $XDG_CONFIG_HOME/nvim/init.vim (or init.lua).
	-  Other config: {dir}/nvim/init.vim (or init.lua) where {dir} is any
	   directory in $XDG_CONFIG_DIRS.
	-  $EXINIT environment variable (Ex command line).
	|$MYVIMRC| is set to the first valid location unless it was already
	set or when using $VIMINIT.

     c. If the 'exrc' option is on (which is NOT the default), the current
	directory is searched for the following files, in order of precedence:
	- ".nvim.lua"
	- ".nvimrc"
	- ".exrc"
	The first that exists is used, the others are ignored.


:Tutor<Enter> to revisit as a refresher.

Add fuzzy searcher.

netrw is the default vim file explorer. :Ex <dir>

Using Mason for external dependencies.


TODO:
- run lua scripts intrenally and call vim.* api for various things (globals for example)
- modify buffers
- do key mappings



Dependencies:
- needs pynvim (:help provider-python)



To run python:
:help python



:python print("Hello!")  # to run code
:pyfile some_script.py	 # to run python script




To write to a new file:
- type in contents
- :w some_dir/some_location_/some_file_name



If directory does not exist, use:
https://github.com/jghauser/mkdir.nvim?tab=readme-ov-file	-> Simplest plugin to understand.
Add to config:
-- mkdir
use {
  'jghauser/mkdir.nvim'
}



New line in normal mode:

Yank an empty line and shift-paste it:

Starting with cursor on empty line:

yy + (shift + p)
"yy" yanks the line, and "shift + p" insert it below, without entering insert mode.

OR
(shift + y) then p as alternative – 
stanley
 CommentedMar 1, 2023 at 12:19 






Key mapping with explanations:

0

If you want to add a newline without the cursor jumping around you can:

(Written in Lua for Neovim, but you could convert it to Vim script.)

vim.keymap.set("n", "<CR>", "mao<esc>0<S-d>`a<cmd>delmarks a<cr>", { desc = "Add new line below" })
vim.keymap.set("n", "<S-CR>", "maO<esc>0<S-d>`a<cmd>delmarks a<cr>", { desc = "Add new line above" })
This uses marks to preserve your line and column position. And deletes any characters that are automatically
added when opening a new line (such as comment characters).

ma: mark current cursor position.
o: open a new line and enter insert mode.
<esc>: enter normal mode.
0<S-d>: go to the beginning of the line and empty it.
`a: go to the original marked cursor location.
<cmd>delmarks a<cr>: delete the mark.
Note that if you want to avoid mapping the carriage return in non-normal windows (e.g. hitting enter in
the quickfix list should still take you to the file) you can:

-- Set keymap for normal windows only (e.g. not quickfix)
local normal_window_keymap = function(mode, lhs, rhs, opts)
  local merged_opts = vim.tbl_extend("force", { noremap = true, expr = true }, opts or {})

  vim.keymap.set(mode, lhs, function()
    local buftype = vim.fn.win_gettype()
    return buftype == "" and rhs or lhs
  end, merged_opts)
end

-- Open new line (like o/O) without moving the cursor, without entering insert mode and removing any characters
normal_window_keymap("n", "<CR>", "mao<esc>0<S-d>`a<cmd>delmarks a<cr>", { desc = "Add new line below" })
normal_window_keymap("n", "<S-CR>", "maO<esc>0<S-d>`a<cmd>delmarks a<cr>", { desc = "Add new line above" })
Share
Follow
edited Nov 10, 2023 at 22:11
answered Nov 4, 2023 at 15:09
samei07's user avatar
samei07
4955 bronze badges
Am I missing something, going back to the original mark and then deleting the mark? This just puts you back
where you started? (I think the point was to be on the next line in normal mode) – 
Jim
 CommentedFeb 22 at 9:59













Automation Cmds (How Set Neovim startup directory to Desktop in Windows):


Try following code in your configuration file, it make use of vim\neovim autocommands feature:

local os = require("os")

local path_to_desktop = os.getenv("USERPROFILE") .. "\\Desktop"

local vim_enter_group = vim.api.nvim_create_augroup("vim_enter_group", { clear = true })

vim.api.nvim_create_autocmd(
    {"VimEnter"},
    { pattern = "*", command = "cd " .. path_to_desktop, group = vim_enter_group }
)
nvim_create_autocmd and nvim_create_group are described in neovim docs. Use :h nvim_create_autocmdto find out more.



Documentation (:h nvim_create_augroup)

==============================================================================
Autocmd Functions                                                *api-autocmd*

nvim_clear_autocmds({opts})                            *nvim_clear_autocmds()*
    Clears all autocommands selected by {opts}. To delete autocmds see
    |nvim_del_autocmd()|.

    Parameters: ~
      • {opts}  Parameters
                • event: (string|table) Examples:
                  • event: "pat1"
                  • event: { "pat1" }
                  • event: { "pat1", "pat2", "pat3" }
                • pattern: (string|table)
                  • pattern or patterns to match exactly.
                    • For example, if you have `*.py` as that pattern for the
                      autocmd, you must pass `*.py` exactly to clear it.
                      `test.py` will not match the pattern.
                  • defaults to clearing all patterns.
                  • NOTE: Cannot be used with {buffer}
                • buffer: (bufnr)
                  • clear only |autocmd-buflocal| autocommands.
                  • NOTE: Cannot be used with {pattern}
                • group: (string|int) The augroup name or id.
                  • NOTE: If not passed, will only delete autocmds not in any
                    group.

nvim_create_augroup({name}, {opts})                    *nvim_create_augroup()*
    Create or get an autocommand group |autocmd-groups|.

    To get an existing group id, do: >lua
        local id = vim.api.nvim_create_augroup("MyGroup", {
            clear = false
        })
<

    Parameters: ~
      • {name}  String: The name of the group
      • {opts}  Dictionary Parameters
                • clear (bool) optional: defaults to true. Clear existing
                  commands if the group already exists |autocmd-groups|.

    Return: ~
        Integer id of the created group.

    See also: ~
      • |autocmd-groups|

nvim_create_autocmd({event}, {opts})                   *nvim_create_autocmd()*
    Creates an |autocommand| event handler, defined by `callback` (Lua
    function or Vimscript function name string) or `command` (Ex command
    string).

    Example using Lua callback: >lua
        vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
          pattern = {"*.c", "*.h"},
          callback = function(ev)
            print(string.format('event fired: %s', vim.inspect(ev)))
          end
        })
<

    Example using an Ex command as the handler: >lua
        vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
          pattern = {"*.c", "*.h"},
          command = "echo 'Entering a C or C++ file'",
        })
<

    Note: `pattern` is NOT automatically expanded (unlike with |:autocmd|),
    thus names like "$HOME" and "~" must be expanded explicitly: >lua
        pattern = vim.fn.expand("~") .. "/some/path/*.py"
<

    Parameters: ~
      • {event}  (string|array) Event(s) that will trigger the handler
                 (`callback` or `command`).
      • {opts}   Options dict:
                 • group (string|integer) optional: autocommand group name or
                   id to match against.
                 • pattern (string|array) optional: pattern(s) to match
                   literally |autocmd-pattern|.
                 • buffer (integer) optional: buffer number for buffer-local
                   autocommands |autocmd-buflocal|. Cannot be used with
                   {pattern}.
                 • desc (string) optional: description (for documentation and
                   troubleshooting).
                 • callback (function|string) optional: Lua function (or
                   Vimscript function name, if string) called when the
                   event(s) is triggered. Lua callback can return a truthy
                   value (not `false` or `nil`) to delete the autocommand.
                   Receives one argument, a table with these keys:
                                                                  *event-args*
                   • id: (number) autocommand id
                   • event: (string) name of the triggered event
                     |autocmd-events|
                   • group: (number|nil) autocommand group id, if any
                   • match: (string) expanded value of <amatch>
                   • buf: (number) expanded value of <abuf>
                   • file: (string) expanded value of <afile>
                   • data: (any) arbitrary data passed from
                     |nvim_exec_autocmds()|                       *event-data*
                 • command (string) optional: Vim command to execute on event.
                   Cannot be used with {callback}
                 • once (boolean) optional: defaults to false. Run the
                   autocommand only once |autocmd-once|.
                 • nested (boolean) optional: defaults to false. Run nested
                   autocommands |autocmd-nested|.

    Return: ~
        Autocommand id (number)

    See also: ~
      • |autocommand|
      • |nvim_del_autocmd()|



Notes:

- in nvim_create_autocmd, callback opt is used for lua function, while command opt is used for the Vim command.
There is a distinction between the two.
- in the above example, "VimEnter" is the EVENT that triggers the autocmd and "vim_enter_group" is the
AUTOCOMMAND GROUP NAME OR ID to match against. !!! NVIM EVENTS LISTED IN nvim_events.md FILE !!!





:echo "C:\\Users\\" .. $USERNAME .. "\\Desktop\\Python_projects\\Nvim_config\\"
:cd "C:\\Users\\" .. $USERNAME .. "\\Desktop\\Python_projects\\Nvim_config\\"




PRINTING:

print(...) and vim.print(...) are totally different

:lua print(vim.fn.api_info())
Returns:
table: 0x0215d5536920

VS

https://neovim.io/doc/user/builtin.html#api_info()
api_info()                                                          api_info()

		Returns Dictionary of api-metadata.
		View it in a nice human-readable format:
lua vim.print(vim.fn.api_info())
Return:
                  (table)
{
    error_types = {
        Exception = {
            id = 0
        },
        Validation = {
            id = 1
        },
    functions = { {
        method = false,
        name = "nvim_get_autocmds",
        parameters = { { "Dictionary", "opts" } },
        return_type = "Array",
        since = 9
    }, {
        method = false,
        ...
    }
}





BUFFERS VS REGISTERS:

https://stackoverflow.com/questions/20165202/what-is-the-difference-between-buffers-and-registers-in-vim


What is the difference between buffers and registers in vim?
Asked 10 years, 10 months ago
Modified 2 years, 8 months ago
Viewed 3k times

Report this ad
7

In vim, command :reg[ister] shows me the list of registers while :ls shows the list of buffers but I'm not sure what the exact difference between registers and buffers is. I think that registers are virtual memory and are used with "(double quotation mark)+{a-zA-Z0-9.%#:-"}+{motion}.

So, what is a buffer? I confuse buffers and registers as of now.

(The only thing I know is that registers are in CPU, buffers in RAM. I need to make both concepts clear to use vim well.

This is what I found about registers in the documentation:

There are nine types of registers:        
1. The unnamed register ""    
2. 10 numbered registers "0 to "9    
3. The small delete register "-    
4. 26 named registers "a to "z or "A to "Z    
5. four read-only registers ":, "., "% and "#    
6. the expression register "=    
7. The selection and drop registers "*, "+ and "~     
8. The black hole register "_    
9. Last search pattern register "/
vimbuffervim-registers
Share
Improve this question
Follow
edited Apr 10, 2017 at 20:40
lgeorget's user avatar
lgeorget
45066 silver badges1414 bronze badges
asked Nov 23, 2013 at 17:01
StarMomo's user avatar
StarMomo
13522 silver badges77 bronze badges
Add a comment
3 Answers
Sorted by:

Highest score (default)
14

A buffer generally refers to a file loaded in memory for editing, although there are also buffers that are not associated with a file. The use of buffers allows you to work with multiple files at the same time.

A register is a kind of clipboard, a memory space in which text can be saved. There are several kinds of registers. Some of them are filled automatically when you do some actions, like yanking or deleting text. More information can be found in the help by typing :help registers.

Share
Improve this answer
Follow
answered Nov 23, 2013 at 18:46
jdc's user avatar
jdc
33922 silver badges55 bronze badges
Add a comment

Report this ad
1

They look similar but are different:
there is a register (act like a clipboard) called unnamed register (")

there is a buffer called [No Name] (contains the content of a non existing file / to be written to a file)

some misuse:
enter image description here

Share
Improve this answer
Follow
answered Feb 11, 2022 at 3:09
Good Pen's user avatar
Good Pen
78177 silver badges1111 bronze badges
Add a comment
0

In vim a buffer most ofen refers to an opened file. It is located in RAM and can have unsaved modification in comparison of the file version in your file system.

You can have several buffers at the same time (if you are editing several files). You can then switch between them using "bn"/"bp", delete one using "bd".

Share
Improve this answer
Follow
edited Nov 23, 2013 at 17:13
answered Nov 23, 2013 at 17:08
Damien's user avatar
Damien
12





Pyright settings: https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#pyright

pyright
https://github.com/microsoft/pyright

pyright, a static type checker and language server for python

Snippet to enable the language server:

require'lspconfig'.pyright.setup{}
Commands:

PyrightOrganizeImports: Organize Imports
PyrightSetPythonPath: Reconfigure pyright with the provided python path
Default values:

cmd :
{ "pyright-langserver", "--stdio" }
filetypes :
{ "python" }
root_dir :
see source file
settings :
{
  python = {
    analysis = {
      autoSearchPaths = true,
      diagnosticMode = "openFilesOnly",
      useLibraryCodeForTypes = true
    }
  }
}
single_file_support :
true







https://github.com/neovim/neovim/issues/8587

Error:
E138: C:\Users\Example\AppData\Local\nvim-data\shada\main.shada.tmp.X files exist, cannot write ShaDa file!

SOLUTION: DELETE ALL 0 SIZE TMP FILES UNDER THE SHADA FOLDER:

In Windows, the path to delete the shada files is:

~AppData\Local\nvim-data\shada
Meaning that, if your username is Example, then:

C:\Users\Example\AppData\Local\nvim-data\shada
You can also access the folder in Windows file explorer using %LOCALAPPDATA%:

%LOCALAPPDATA%/nvim-data/shada




Error:
Spawning language server with cmd`diagnostic-languageserver`failed. The language server is either not installed, missing from PATH, or not executable.

Possible cause:
Mangling with autocomplete modules even after uninstalling them.

SOLUTION:
- :mason
- Go to pyright and update (or uninstall and reinstall)




Error:
Need help with this error message for my neovim: Error executing vim.schedule lua callback: vim/keymap.lua:0: rhs: expected string|function, got nil

https://www.reddit.com/r/neovim/comments/1bp9762/need_help_with_this_error_message_for_my_neovim/

Rhs is right hand side which means the 3rd argument to vim.keymap.set.

As you see in line 79 of language.lua, you set vim.lsp.buf.formatting which is a deprecated function that does not exist anymore. This means you are passing a nil value to rhs resulting to this error.

Read :h deprecated and update your config file accordingly.


ALSO:

u/TheLeoP_ avatar
The error is on this line. vim.lsp.buf.formatting no longer exists. I'm not on my PC, but I think the new function is vim.lsp.buf.format

u/jajajang avatar
Thanks! That helped the error go away but now I'm trying to figure out why gd doesn't work anymore, looking into it more now but any tips appreciated

u/TheLeoP_ avatar
Is the LSP attaching correctly? What does :LspInfo show?

u/jajajang avatar
:LspInfo result
Language client log: /Users/.local/state/nvim/lsp.log
Detected filetype:
1 client(s) attached to this buffer:
Client: copilot (id: 1, pid: nil, bufnr: [1])
`filetypes:`
`autostart:       false`
`root directory:  Running in single file mode.`
`cmd:             node /Users/.config/nvim/pack/github/start/copilot.vim/dist/agent.js --stdio`
Configured servers list: gopls, pyright, rust_analyzer

u/TheLeoP_ avatar
Only copilot is attaching to your buffer, what file type is that?

u/jajajang avatar
Yeah hmm I'm not sure why changing that line caused this, I'll try uninstalling copilot first






Error (not fixed yet):
Attaching to an LSP server yields a version extraction error when checking :LspInfo, though version seems to exist:
- Client: pyright (id: 1, bufnr: [1])
  filetypes:         python
  cmd:               ~\AppData\Local\nvim-data\mason\bin\pyright-langserver.CMD --stdio
  version:           `Error: Connection input stream is not set. Use arguments of createConnection or set command line parameters: '--node-ipc', '--stdio' or '--socket={number}'     at _createConnection ...
                     ... (output of `C:\Users\...\AppData\Local\nvim-data\mason\bin\pyright-langserver.CMD --version`)
  executable:        true
  autostart:         true

Starting manually in cmd (as per :LspInfo details) prints info twice:

...> AppData\Local\nvim-data\mason\bin\pyright-langserver.cmd --stdio
Content-Length: 119

{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Pyright language server 1.1.385 starting"}}Content-Length: 198

{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Server root directory: file:///c%3A/Users/Marc/AppData/Local/nvim-data/mason/packages/pyright/node_modules/pyright/dist"}}



Error:
Any character that shows up as a question mark in a box is a font issue, not recognizing the character.
Such examples are  the https://en.wikipedia.org/wiki/Braille_pattern_dots-1236 or the https://www.compart.com/en/unicode/U+28FF

https://github.com/wfxr/minimap.vim uses it and the solution is:
Minimap shows up as a jumble of characters?
Check that your encoding is set to utf-8 and not latin1 (for Vim users). Also, ensure that you're using a Unicode-compatible font that has Braille characters in it.

The simple solution found under:
https://stackoverflow.com/questions/25115752/vim-encodings-latin1-and-utf-8


Solution is:
https://github.com/ryanoasis/vim-devicons/issues/198
https://neovim.io/doc/user/usr_45.html section USING UNICODE IN THE GUI
https://www.youtube.com/watch?v=e1uqSCRodyg
https://github.com/microsoft/cascadia-code/releases (used by screenshot in https://github.com/MiaadTeam/lesvim) and https://github.com/ryanoasis/nerd-fonts are some solutions
https://github.com/wfxr/minimap.vim uses it also
https://www.reddit.com/r/neovim/comments/y8t6nd/best_programming_font_for_neovim_what_about/




Error:
Coloring alpha greet screen header is not working.

Solution is:
- read the color section under :help Alpha
- https://www.reddit.com/r/neovim/comments/wy65p3/how_do_you_apply_colors_to_nvim_dashboard/
- example https://github.com/goolord/alpha-nvim/discussions/16#discussioncomment-1927405 in https://github.com/AdamWhittingham/vim-config/blob/a4112ad378656d64a02baa3ed3a629db7c4a172f/lua/config/plugins/alpha-nvim.lua#L117



Error:
Can't change the font programatically via options.

Solution involves:
https://neovim.discourse.group/t/how-to-set-nerd-font-in-neovim/1657
vim.opt.guifont will only work if you’re using any GUI frontend for Neovim.
If you’re using Neovim TUI (i.e. inside a Terminal), you’ll need to change the font of your terminal app instead. Neovim will use whatever font your terminal app is set to use.

When we call nvim in a terminal, its a TUI (https://neovim.io/doc/user/tui.html). Terminals use the same font that it originally had.
When we call hosting of a server to open up in a graphical application (Neovide, Neovim-qt, etc) it is a GUI https://neovim.io/doc/user/gui.html#GUI. Guis will read the options and apply them.

Quick TUI solution:
Manually go to the terminal's properties and change the font. https://www.reddit.com/r/neovim/comments/z9ow2c/jet_brains_mono_issue_with_icons_in_nvimtree_and/
Settings will be remembered per terminal upon restart and cmd, powershell and neovim are independent of each other. Running 'start /max nvim' is it's own terminal.

Also a cross platform solution but requires installing an extra app:
With wezterm, it is possible to have a different font for Neovim than that of the terminal.
Basically you create a different "profile" when opening a new command line program (which is just nvim) and wezterm switches the font.
Wezterm is configured in lua, and many API has been exposed for operations with fine granularity. Check the doc and see what API you want to use.
https://github.com/wez/wezterm https://www.reddit.com/r/neovim/comments/12vn743/is_it_possible_to_have_a_different_font_for/


Available GUIs apps that need to be installed:
Neovide has this cursor animation and can do https calls from the neovim host over the internet https://neovide.dev/features.html. Apparently it doesn't support font rendering https://www.youtube.com/watch?v=2IDyWEBLmic?
Neovim-qt https://github.com/equalsraf/neovim-qt. Needs QT installed.
Nvui https://github.com/rohit-px2/nvui https://www.reddit.com/r/neovim/comments/pdyqt6/nvui_a_new_gui_for_neovim/
Bonus: https://github.com/neovide/neovide/issues/1211



Error:
Terminal buffer does not update in real time.

Reason:
https://vi.stackexchange.com/a/29347
Short answer: use :terminal {command} for interactive stuff.
Long answer: neovim’s :! actually communicates via subprocesses and the commands are not directly interactive due to the way the IO streams are handled.
:terminal is envisioned as the replacement for this, since it does use a TTY and is interactive.

Solution is:
Instead of using "<Esc> :w <bar> exec '!python '.shellescape('%')<CR>", use ":terminal python %". TODO: Find out if :w is needed before.




DEBUGGING:

Debugging without any packages or configurations (raw nvim):
nvim --clean or vnim --clean file_name

Debugging by using an older version without installing the msi every time and change the version and file name:
https://github.com/neovim/neovim/releases/download/v0.10.2/nvim-win64.zip
File name and versions can be found under https://github.com/neovim/neovim/releases, thought all urls somehow are not explicitly shown.


Debugging cmp (autocomplete) not working:
On an opened file type (based on extension).
:checkhealth lsp        -- check if the lsp client for that type has been attached successfully.
:LspInfo                -- check if the lsp client for that type has been attached successfully.
:LspLog + <S-g>         -- see the logs for the lsp attachment. This would show if any errors occurred, even though the client is attached.


Liked fonts:
https://www.programmingfonts.org/#iosevka           https://typeof.net/Iosevka/
https://www.programmingfonts.org/#jetbrainsmono     https://www.jetbrains.com/lp/mono/    clean, easy to read for a variety of reasons, used in pycharm
https://www.programmingfonts.org/#cousine

All downloads from https://www.nerdfonts.com/font-downloads.

Other: https://www.reddit.com/r/vscode/comments/17whogu/what_is_your_favorite_programming_font/

Note: some versions contain ligatures / coding ligations. They are basically arrows that replace things like != or -> and such.
https://stackoverflow.com/questions/62195642/what-the-difference-between-jetbrains-mono-and-jetbrains-mono-nl
https://github.com/JetBrains/JetBrainsMono/issues/19






Plugins:
Plugins get called and the .setup({}) gets implicitly added. Ex: require('plugins.catppuccin')
local nvim_lsp = require('lspconfig')
nvim_lsp.rust_analyzer.setup {
  settings = {
    ["rust-analyzer"] = {
      workspace = {
        symbol = {
          search = {
            kind = "all_symbols"
          }
        }
      }
    },
  }
}
require('lspconfig').rust_analyzer.setup({
    on_attach = on_attach,
    capabilities = require('cmp_nvim_lsp').default_capabilities(),
    filetypes = {'rust'},
})


[deleted]
They are not mutually exclusive. opts is a table that gets passed to require("some_plugin").setup if config is not set.
If config is set, it receives opts as it second argument (so you can call the setup function yourself, pass opts to it
and do any custom config that you want to do).

[deleted]
This is the correct answer, you can conveniently use the opts table in the config function like this.
config = function(_, opts)
    ...
end

u/desgreech avatar
opts can also be a function that returns a table, in case you need to do something more elaborate.


Todo:

linters
find out why docs is missing
map <C-q> to show definition
map go to definition, back and usage locations
funct come with () and pointer
git
packages
better fs
logo?
run through :Tutor and document it
