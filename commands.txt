NETRW:
:find .         - open netrw for file browsing
- :o            - open file for editing
- :e file.x     - define a file and open e buffer for adding contets in it. Must save for it to be created
- :w            - save buffer contents to the file
mt              - toggle mark on target file to copy
mf              - toggle mark on target folder to copy into
mc              - make copy


i               - insert before. toggling moves cursor one character to the left
a               - insert after (apend)
x               - delete character
w               - move cursor to the the first character of the next word.
W               - same as w but considers only whitespaces as a separator between words. An empty line is a white space.
e               - move cursor to the last character of the word and that of the next word in the next step.
E               - same as e but considers only whitespaces as a separator between words. An empty line is a white space.
d
D
0
$
^


gg              - go to start of file
<Shift-G>       - go to end of file
z+<Shift-M>     - code fold


:messages       - to see the whole output in the messages window
<C-w>_          - maximize the height of the messages window to take a better look




:vsplit         - duplicate current buffer in by splitting in half vertically (new buffer right as per opt settings)
:split          - duplicate current buffer in by splitting in half horizontally (new buffer below as per opt settings)


Maps (keys are not case sensitive):
<CTRL-j> OR :wincmd j       - jump cursor to buffer window down
<CTRL-k> OR :wincmd k       - jump cursor to buffer window up
<CTRL-h> OR :wincmd h       - jump cursor to buffer window left
<CTRL-l> OR :wincmd l       - jump cursor to buffer window right



General (debug related):
:h deprecated   - lists a series of deprecated functionalities to help with debugging broken config changes
:map            - list currently mapped keys (variations for different modes only = :nmap, :imap, :vmap)



LSP:
:LspInfo        - show details when a lsp is attached
:=vim.lsp.get_client_by_id(id).server_capabilities
                - see capabilities of lsp, providing the id from LspInfo command
