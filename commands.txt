# All: https://neovim.io/doc/user/vimindex.html


NETRW:
:find .         - open netrw for file browsing
- :o            - open file for editing
- :e file.x     - define a file and open e buffer for adding contets in it. Must save for it to be created
- :w            - save buffer contents to the file
mt              - toggle mark on target file to copy
mf              - toggle mark on target folder to copy into
mc              - make copy


i               - insert before. toggling moves cursor one character to the left
a               - insert after (apend)
x               - delete character
w               - move cursor to the the first character of the next word.
W               - same as w but considers only whitespaces as a separator between words. An empty line is a white space.
e               - move cursor to the last character of the word and that of the next word in the next step.
E               - same as e but considers only whitespaces as a separator between words. An empty line is a white space.
d
D
0
$
^

<S-O>           - insert mode on new line above
<S-I>           - equivalent to $+i to move to the first character of the line and switch to insert mode at the beginning
<S-A>           - equivalent to $+a to move to the last character of the line and switch to insert mode at the end


gg              - go to start of file
<Shift-G>       - go to end of file
z+<Shift-M>     - code fold


:messages       - to see the whole output in the messages window
<C-w>_          - maximize the height of the messages window to take a better look



NEW WINDOW:
:vsplit         - duplicate current buffer in by splitting in half vertically (new buffer right as per opt settings)
:split          - duplicate current buffer in by splitting in half horizontally (new buffer below as per opt settings)
:new|put=execute('map')     - open a new buffer window and fill it with a command's return contents for scrolling through.
                            - :map in this case prints the list of mapped keys. Without new, scrolling though is not available.
:vnew           - open a window with an empty buffer splitting in half vertically (new buffer right as per opt settings)
:new            - open a window with an empty buffer splitting in half horizontally (new buffer bellow as per opt settings)
* you will have a new buffer then, obviously. that buffer becomes a file only if you :w it to the disk.



v       - enter visual mode
y       - copy (yank) selected text
d       - cut (delete) selected text
p       - paste after the cursor
<S-P>   - paste before the cursor.


<S>-d-f / :NvimTreeOpen     - opens a dir tree structure on the left side
g? (during tree open)       - lists a series of available commands to navigate said tree




Maps (keys are not case sensitive):
<CTRL-j> OR :wincmd j       - jump cursor to buffer window down
<CTRL-k> OR :wincmd k       - jump cursor to buffer window up
<CTRL-h> OR :wincmd h       - jump cursor to buffer window left
<CTRL-l> OR :wincmd l       - jump cursor to buffer window right



General (debug related):
:h deprecated           - lists a series of deprecated functionalities to help with debugging broken config changes
:map                    - list currently mapped keys (variations for different modes only = :nmap, :imap, :vmap)
:verbose map <C-/>      - print details relating only to a particular mapping
/ & key combination     - shows in the actual internal mapping of a combination in the message window.
                          <C-/> => <C-_> and gets displayed as ^_ in windows. ^ represents CTRL.

LSP:
:LspInfo (on an opened buffer)          - for debugging if an LSP client attached to the installed LSP server
:=vim.lsp.get_client_by_id(id).server_capabilities
                                        - see capabilities of lsp, providing the id from LspInfo command
On an opened file type (based on extension).
:checkhealth lsp        -- check if the lsp clients are attached
:LspInfo                -- check if the lsp client for that type has been attached successfully
:LspLog + <S-g>         -- see the logs for the lsp attachment, to check if any errors occurred, despite the client being attached


PACKAGE MANAGERS:
:Lazy                                   - opens a graphical status window
:h mason-commands                       - help buffer for the mason app
:Mason                                  - opens a graphical status window
:MasonUpdate                            - updates all managed registries
:MasonInstall <package> ...             - installs/re-installs the provided packages
:MasonUninstall <package> ...           - uninstalls the provided packages
:MasonUninstallAll                      - uninstalls all packages
:MasonLog                               - opens the mason.nvim log file in a new tab window

Finding:
<S-#> (while hovering in normal mode)       - iterate over all instances of the sequence of chars within the file

MULTIPLE LINES EDITING:

To comment out blocks in vim:
- press Esc (to leave editing or other mode)
- hit ctrl+v (visual block mode)
- use the ↑/↓ arrow keys to select lines you want (it won't highlight everything - it's OK!)
- Shift+i (capital I)
- insert the text you want, e.g. %
- press EscEsc

To uncomment blocks in vim:
- press Esc (to leave editing or other mode)
- hit ctrl+v (visual block mode)
- use the ↑/↓ arrow keys to select the lines to uncomment.

If you want to select multiple characters, use one or combine these methods:

- use the left/right arrow keys to select more text
- to select chunks of text use shift + ←/→ arrow key
- you can repeatedly push the delete keys below, like a regular delete button
- press d or x to delete characters, repeatedly if necessary


TERMINAL EMULATION:
:terminal                                   - opens a shell without previous output
:terminal python %                          - runs command in terminal without subprocess lagging io operations: https://vi.stackexchange.com/a/29347
:exec '!python '.shellescape('%')<CR>")     - runs command in interactive shell but slow to update: https://vi.stackexchange.com/a/29347
<C-Z> / :shell                              - spawns a new shell from vim
:!sh, :!bash, :!zsh                         - same effect as :shell
:source %                                   - run current lua commands, provided that the buffer was saved on disk under a file name
